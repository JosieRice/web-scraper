{"version":3,"sources":["../src/app.js"],"names":["app","port","process","env","PORT","use","req","res","next","header","bodyParser","json","urlencoded","extended","buzzFeed","input","browser","puppeteer","launch","page","newPage","url","goto","title","evaluate","Array","from","document","querySelectorAll","map","innerText","ingredients","getElementById","children","instructions","jsonRecipe","close","post","body","status","send","success","message","recipe","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEA,IAAIC,OAAOC,QAAQC,GAAR,CAAYC,IAAvB;AACA,IAAIH,QAAQ,IAAR,IAAgBA,QAAQ,EAA5B,EAAgC;AAC9BA,SAAO,IAAP;AACD;;AAED;AACAD,IAAIK,GAAJ,CAAQ,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChC;AACAD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACA;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,qBAA3C;AACA;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,gDAA3C;AACAD;AACD,CARD;;AAUA;AACAR,IAAIK,GAAJ,CAAQK,qBAAWC,IAAX,EAAR;AACAX,IAAIK,GAAJ,CAAQK,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;;AAEA,IAAMC,WAAW,eAAXA,QAAW,CAAOC,KAAP,EAAiB;AAChC,MAAMC,UAAU,MAAMC,oBAAUC,MAAV,EAAtB;AACA,MAAMC,OAAO,MAAMH,QAAQI,OAAR,EAAnB;AACA,MAAMC,MAAMN,KAAZ;AACA,QAAMI,KAAKG,IAAL,CAAUD,GAAV,CAAN;;AAEA,MAAME,QAAQ,MAAMJ,KAAKK,QAAL,CAAc;AAAA,WAChCC,MAAMC,IAAN,CAAWC,SAASC,gBAAT,CAA0B,IAA1B,CAAX,EAA4CC,GAA5C,CAAgD;AAAA,aAASN,MAAMO,SAAf;AAAA,KAAhD,CADgC;AAAA,GAAd,CAApB;;AAIA,MAAMC,cAAc,MAAMZ,KAAKK,QAAL,CAAc;AAAA,WACtCC,MAAMC,IAAN,CAAWC,SAASK,cAAT,CAAwB,oBAAxB,EAA8CC,QAAzD,EAAmEJ,GAAnE,CAAuE;AAAA,aAASN,MAAMO,SAAf;AAAA,KAAvE,CADsC;AAAA,GAAd,CAA1B;;AAIA,MAAMI,eAAe,MAAMf,KAAKK,QAAL,CAAc;AAAA,WACvCC,MAAMC,IAAN,CAAWC,SAASK,cAAT,CAAwB,oBAAxB,EAA8CC,QAAzD,EAAmEJ,GAAnE,CAAuE;AAAA,aAASN,MAAMO,SAAf;AAAA,KAAvE,CADuC;AAAA,GAAd,CAA3B;;AAIA,MAAIK,aAAa;AACf,aAASZ,KADM;AAEf,mBAAeQ,WAFA;AAGf,oBAAgBG;AAHD,GAAjB;;AAMA,QAAMlB,QAAQoB,KAAR,EAAN;AACA,SAAOD,UAAP;AACD,CA1BD;;AA4BA;AACAnC,IAAIqC,IAAJ,CAAS,iBAAT,EAA4B,gBAAO/B,GAAP,EAAYC,GAAZ,EAAoB;AAC9C,MAAI,CAACD,IAAIgC,IAAJ,CAASjB,GAAd,EAAmB;AACjB,WAAOd,IAAIgC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,OADiB;AAE1BC,eAAS;AAFiB,KAArB,CAAP;AAID;;AAED,MAAMrB,MAAMf,IAAIgC,IAAJ,CAASjB,GAArB;AACA,MAAMsB,SAAS,MAAM7B,SAASO,GAAT,CAArB;;AAEA,SAAOd,IAAIgC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,aAAS,MADiB;AAE1BC,uBAAiBrB,GAAjB,8BAF0B;AAG1BsB;AAH0B,GAArB,CAAP;AAKD,CAhBD;;AAkBA3C,IAAI4C,MAAJ,CAAW3C,IAAX,EAAiB;AAAA,SAAM4C,QAAQC,GAAR,oCAA6C7C,IAA7C,OAAN;AAAA,CAAjB","file":"app.js","sourcesContent":["import express from 'express';\nimport puppeteer from 'puppeteer';\nimport bodyParser from 'body-parser';\n\nconst app = express();\n\nlet port = process.env.PORT;\nif (port == null || port == \"\") {\n  port = 8000;\n}\n\n// CORS\napp.use(function (req, res, next) {\n  // Instead of \"*\" you should enable only specific origins\n  res.header('Access-Control-Allow-Origin', '*');\n  // Supported HTTP verbs\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  // Other custom headers\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\n// Parse incoming requests data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\nconst buzzFeed = async (input) => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const url = input;\n  await page.goto(url);\n\n  const title = await page.evaluate(() =>\n    Array.from(document.querySelectorAll(\"h1\")).map(title => title.innerText)\n  );\n\n  const ingredients = await page.evaluate(() =>\n    Array.from(document.getElementById(\"mod-subbuzz-text-1\").children).map(title => title.innerText)\n  );\n\n  const instructions = await page.evaluate(() =>\n    Array.from(document.getElementById(\"mod-subbuzz-text-2\").children).map(title => title.innerText)\n  );\n\n  let jsonRecipe = {\n    'title': title,\n    'ingredients': ingredients,\n    'instructions': instructions\n  }\n\n  await browser.close();\n  return jsonRecipe\n};\n\n// take a recipe URL and return the recipe info\napp.post('/api/v1/recipes', async (req, res) => {\n  if (!req.body.url) {\n    return res.status(400).send({\n      success: \"false\",\n      message: \"didn't get a url in body\"\n    });\n  }\n\n  const url = req.body.url;\n  const recipe = await buzzFeed(url);\n\n  return res.status(201).send({\n    success: \"true\",\n    message: `sent ${url} => here's what we found`,\n    recipe\n  })\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`))"]}